# GitHub Actions workflow to build a .NET WPF application.

name: .NET WPF CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release] # Build for both Debug and Release

    runs-on: windows-latest # WPF applications require a Windows runner

    env:
      Solution_Name: BLT QR Generator.sln # Your solution file name
      Project_Name: BLT QR Generator      # The main project name (without .csproj)
                                          # Used for constructing artifact paths

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetches all history for all tags and branches

    - name: Install .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x # Matches your project's target framework

    - name: Setup MSBuild
      # This action ensures MSBuild is correctly set up and added to the PATH.
      uses: microsoft/setup-msbuild@v2

    - name: List files in workspace (Debugging Step)
      # This step will show the files and current working directory.
      # Helps to verify if the .sln file is present where expected.
      run: |
        echo "Current Working Directory:"
        pwd
        echo "Files in Current Directory:"
        ls -la
      shell: bash # Using bash for ls -la and pwd for consistent output

    - name: Restore NuGet packages
      # Restores dependencies for the solution.
      run: msbuild "$env:Solution_Name" /t:Restore /p:Configuration=${{ matrix.configuration }}
      # Added quotes around $env:Solution_Name in case of spaces, though not present here.

    - name: Build Solution
      # Builds the specified solution and configuration.
      run: msbuild "$env:Solution_Name" /p:Configuration=${{ matrix.configuration }}
      # Added quotes around $env:Solution_Name

    - name: Upload Build Artifacts
      # Uploads the build output (e.g., .exe, .dlls) for the current configuration.
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.Project_Name }}-${{ matrix.configuration }} # Artifact name includes project and configuration
        # The path should point to the output directory of your main WPF project.
        # This typically is ProjectName/bin/Configuration/netX.X-windows/
        # For .NET 8, it will be net8.0-windows.
        path: ${{ env.Project_Name }}\bin\${{ matrix.configuration }}\net8.0-windows\
        # Example: BLT QR Generator\bin\Release\net8.0-windows\
